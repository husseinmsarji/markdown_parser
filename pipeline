/**
 * Minimal "Sheet → GCS" autosync.
 * - Exports the whole spreadsheet as XLSX (all tabs) OR one tab as CSV.
 * - Replaces gs://<bucket>/<objectName> on each edit.
 * - Throttles to once per minute to avoid over-triggering.
 */
const CONFIG = {
  BUCKET: 'YOUR_BUCKET_NAME',              // <-- change
  OBJECT_NAME: 'exports/my-sheet.xlsx',    // <-- change (use .xlsx or .csv)
  EXPORT_FORMAT: 'XLSX',                   // 'XLSX' or 'CSV'
  CSV_SHEET_NAME: 'Sheet1',                // used only when EXPORT_FORMAT === 'CSV'
  MIN_INTERVAL_SECONDS: 60                 // simple debounce
};

// Run once to create the trigger.
function setup() {
  const ssId = SpreadsheetApp.getActiveSpreadsheet().getId();
  // Idempotent trigger creation
  ScriptApp.getProjectTriggers()
    .filter(t => t.getHandlerFunction() === 'exportAndUpload')
    .forEach(t => ScriptApp.deleteTrigger(t));
  ScriptApp.newTrigger('exportAndUpload')
    .forSpreadsheet(ssId)
    .onEdit()                               // fires when a cell value changes
    .create();
  Logger.log('Trigger created. Edit the sheet to test.');
}

// Main handler – runs on edits (installable trigger).
function exportAndUpload(e) {
  const lock = LockService.getDocumentLock();
  lock.waitLock(30000);
  try {
    if (!shouldRun_()) return; // debounce

    const blob = getExportBlob_();
    const changed = updateIfChanged_(blob);

    PropertiesService.getDocumentProperties()
      .setProperty('lastRun', String(Date.now()));
    if (changed) {
      Logger.log('Uploaded: gs://%s/%s (%s bytes)',
        CONFIG.BUCKET, CONFIG.OBJECT_NAME, blob.getBytes().length);
    } else {
      Logger.log('No content change detected; skipped upload.');
    }
  } finally {
    lock.releaseLock();
  }
}

// Export spreadsheet as XLSX (all tabs) or CSV (single tab) and return a Blob.
function getExportBlob_() {
  const ssId = SpreadsheetApp.getActiveSpreadsheet().getId();
  const token = ScriptApp.getOAuthToken();

  if (CONFIG.EXPORT_FORMAT === 'XLSX') {
    // Official Drive v3 export endpoint (10 MB export limit).
    const url = 'https://www.googleapis.com/drive/v3/files/' + ssId +
      '/export?mimeType=application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
    const resp = UrlFetchApp.fetch(url, {
      headers: { Authorization: 'Bearer ' + token },
      muteHttpExceptions: true
    });
    if (resp.getResponseCode() !== 200) {
      throw new Error('Drive export failed: ' +
        resp.getResponseCode() + ' ' + resp.getContentText());
    }
    return resp.getBlob().setName(fileBaseName_() + '.xlsx');
  }

  if (CONFIG.EXPORT_FORMAT === 'CSV') {
    // Mirrors "File → Download → CSV (current sheet)" using the tab's gid.
    const sh = SpreadsheetApp.getActive().getSheetByName(CONFIG.CSV_SHEET_NAME);
    if (!sh) throw new Error('Sheet not found: ' + CONFIG.CSV_SHEET_NAME);
    const gid = sh.getSheetId();
    const url = 'https://docs.google.com/spreadsheets/d/' + ssId +
      '/export?format=csv&gid=' + gid;
    const resp = UrlFetchApp.fetch(url, {
      headers: { Authorization: 'Bearer ' + token },
      muteHttpExceptions: true
    });
    if (resp.getResponseCode() !== 200) {
      throw new Error('CSV export failed: ' +
        resp.getResponseCode() + ' ' + resp.getContentText());
    }
    return resp.getBlob().setName(fileBaseName_() + '.csv');
  }

  throw new Error('Unsupported EXPORT_FORMAT: ' + CONFIG.EXPORT_FORMAT);
}

// Upload to GCS only when the content actually changed (hash compare).
function updateIfChanged_(blob) {
  const props = PropertiesService.getDocumentProperties();
  const hash = Utilities.base64Encode(
    Utilities.computeDigest(Utilities.DigestAlgorithm.SHA_256, blob.getBytes())
  );
  const lastHash = props.getProperty('lastHash');
  if (lastHash === hash) return false;

  const uploadUrl = 'https://www.googleapis.com/upload/storage/v1/b/' +
    encodeURIComponent(CONFIG.BUCKET) + '/o?uploadType=media&name=' +
    encodeURIComponent(CONFIG.OBJECT_NAME);

  const resp = UrlFetchApp.fetch(uploadUrl, {
    method: 'post',
    contentType: blob.getContentType(),
    payload: blob.getBytes(),
    headers: { Authorization: 'Bearer ' + ScriptApp.getOAuthToken() },
    muteHttpExceptions: true
  });
  const code = resp.getResponseCode();
  if (code < 200 || code >= 300) {
    throw new Error('GCS upload failed: ' + code + ' ' + resp.getContentText());
  }
  props.setProperty('lastHash', hash);
  return true;
}

function shouldRun_() {
  const props = PropertiesService.getDocumentProperties();
  const last = Number(props.getProperty('lastRun') || 0);
  const seconds = (Date.now() - last) / 1000;
  return seconds >= CONFIG.MIN_INTERVAL_SECONDS;
}

function fileBaseName_() {
  return SpreadsheetApp.getActiveSpreadsheet()
    .getName()
    .replace(/[\\/#?]+/g, '_');
}

// Optional manual test
function runOnce() { exportAndUpload(); }
